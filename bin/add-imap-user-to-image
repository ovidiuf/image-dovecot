#!/usr/bin/env bash

function usage() {
cat <<EOF

Utility that encapsulates the logic of adding an IMAP user to the dovecot instance configuration
and supporting system files. To be used as part of Dockerfile RUN directive.

RUN ./bin/add-imap-user-to-image <user-name> \
    --uid=<uid> \
    --gid=<gid> \
    --dovecot-conf-file=<dovecot-conf-file>

EOF
}

function main() {

    local user
    local uid
    local gid
    local dovecot_conf_file

    while [ -n "$1" ]; do

        if [ -z "${user}" ]; then

            user=$1

        elif [[ $1 =~ --uid= ]]; then

            uid=${1:6}

        elif [[ $1 =~ --gid= ]]; then

            gid=${1:6}

        elif [[ $1 =~ --dovecot-conf-file= ]]; then

            dovecot_conf_file=${1:20}

        fi

        shift;
    done

    [ -z "${user}" ] && { usage; return 1; }

    add-user "${user}" "${uid}" "${gid}" "${dovecot_conf_file}"
}

function add-user() {

    local user=$1
    local uid=$2
    local gid=$3
    local dovecot_conf_file=$4

    [ -z "${user}" ] && { echo "'user' not provided" 1>&2; exit 1; }
    [ -z "${uid}" ] && { echo "'uid' not provided" 1>&2; exit 1; }
    [ -z "${gid}" ] && { echo "'gid' not provided" 1>&2; exit 1; }
    [ -z "${dovecot_conf_file}" ] && { echo "'dovecot_conf_file' not provided" 1>&2; exit 1; }
    [ -f ${dovecot_conf_file} ] || { echo "dovecot_conf_file ${dovecot_conf_file} does not exist or not readable" 1>&2; exit 1; }

    echo "adding IMAP user '${user}' ..."
    echo "uid: ${uid}"
    echo "gid: ${gid}"
    echo "dovecot configuration file: ${dovecot_conf_file}"

    update-valid-ids ${uid} ${gid} ${dovecot_conf_file}

    #
    # add password to /opt/dovecot/conf/passwd
    #

    local passwd_file=$(dirname ${dovecot_conf_file})/passwd

    # TODO encode in-line
    echo "${user}:{HMAC-MD5}529d585a1715f9aa4df070c6fe54fda19de658f14f6fb297149ebafab0f30d36" >> ${passwd_file}
    chmod 0600 ${passwd_file}

    #
    # add user to /opt/dovecot/conf/userdb
    #

    local userdb_file=$(dirname ${dovecot_conf_file})/userdb
    local user_home_dir=/opt/dovecot/home/${user}

    echo "${user}:x:${uid}:${gid}::${user_home_dir}:-" >> ${userdb_file}

    #
    # create the home directory
    #

    mkdir ${user_home_dir}
    chown ${uid}:${gid} ${user_home_dir}
    chmod 0700 ${user_home_dir}
}

#
# Updates 'first_valid_uid', 'last_valid_uid', 'first_valid_gid' and 'first_valid_gid' in the dovecot config file.
#
function update-valid-ids() {

    local uid=$1
    local gid=$2
    local dovecot_conf_file=$3

    [ -z "${uid}" ] && { echo "'uid' not provided" 1>&2; exit 1; }
    [ -z "${gid}" ] && { echo "'gid' not provided" 1>&2; exit 1; }
    [ -z "${dovecot_conf_file}" ] && { echo "'dovecot_conf_file' not provided" 1>&2; exit 1; }
    [ -f ${dovecot_conf_file} ] || { echo "dovecot_conf_file ${dovecot_conf_file} does not exist or not readable" 1>&2; exit 1; }

    echo "updating first_valid_uid/last_valid_uid/first_valid_gid/first_valid_gid in ${dovecot_conf_file} ..."

    local temp_file=/tmp/.sed.tmp

    local first_valid_uid=$(grep "^first_valid_uid *=" ${dovecot_conf_file})
    [ -z "${first_valid_uid}" ] && { echo "no 'first_valid_uid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    first_valid_uid=${first_valid_uid#*=}
    first_valid_uid=${first_valid_uid## }
    if [ ${uid} -lt ${first_valid_uid} ]; then
        sed -e 's/^first_valid_uid.*$/first_valid_uid = '${uid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated first_valid_uid = ${uid}"
    fi

    local last_valid_uid=$(grep "^last_valid_uid *=" ${dovecot_conf_file})
    [ -z "${last_valid_uid}" ] && { echo "no 'last_valid_uid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    last_valid_uid=${last_valid_uid#*=}
    last_valid_uid=${last_valid_uid## }
    if [ ${uid} -gt ${last_valid_uid} ]; then
        sed -e 's/^last_valid_uid.*$/last_valid_uid = '${uid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated last_valid_uid = ${uid}"
    fi

    local first_valid_gid=$(grep "^first_valid_gid *=" ${dovecot_conf_file})
    [ -z "${first_valid_gid}" ] && { echo "no 'first_valid_gid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    first_valid_gid=${first_valid_gid#*=}
    first_valid_gid=${first_valid_gid## }
    if [ ${gid} -lt ${first_valid_gid} ]; then
        sed -e 's/^first_valid_gid.*$/first_valid_gid = '${gid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated first_valid_gid = ${gid}"
    fi

    local last_valid_gid=$(grep "^last_valid_gid *=" ${dovecot_conf_file})
    [ -z "${last_valid_gid}" ] && { echo "no 'last_valid_gid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    last_valid_gid=${last_valid_gid#*=}
    last_valid_gid=${last_valid_gid## }
    if [ ${gid} -gt ${last_valid_gid} ]; then
        sed -e 's/^last_valid_gid.*$/last_valid_gid = '${gid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated last_valid_gid = ${gid}"
    fi

}

main "$@"