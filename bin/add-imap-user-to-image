#!/usr/bin/env bash

function usage() {
cat <<EOF

Utility that encapsulates the logic of adding an IMAP user to the dovecot instance configuration
and supporting system files. To be used as part of Dockerfile RUN directive.

RUN ./bin/add-imap-user-to-image <user-name> \
    --password=<password> \
    --uid=<uid> \
    --gid=<gid> \
    --imapusers-gid=<imapusers-gid> \
    --dovecot-conf-file=<dovecot-conf-file> \
    --dovecotpw=<dovecotpw-fully-qualified-path>

EOF
}

function main() {

    local user
    local password_file
    local password
    local uid
    local gid
    local imapusers_gid
    local dovecot_conf_file
    local dovecotpw_file

    while [ -n "$1" ]; do

        if [ -z "${user}" ]; then

            user=$1

        elif [[ $1 =~ --password-file= ]]; then

            password_file=${1:16}

        elif [[ $1 =~ --uid= ]]; then

            uid=${1:6}

        elif [[ $1 =~ --gid= ]]; then

            gid=${1:6}

        elif [[ $1 =~ --imapusers-gid= ]]; then

            imapusers_gid=${1:16}

        elif [[ $1 =~ --dovecot-conf-file= ]]; then

            dovecot_conf_file=${1:20}

        elif [[ $1 =~ --dovecotpw= ]]; then

            dovecotpw_file=${1:12}

        fi

        shift;
    done

    [[ ${password} =~ REPLACE ]] && { echo "" 1>&2; echo "provide a valid password for add-imap-user-to-image [...] --password=... in Dockerfile" 1>&2; echo "" 1>&2; exit 1; }

    [ -z "${user}" ] && { usage; return 1; }

    [ -z "${password_file}" ] && { echo "no --password-file was provided, we cannot determine ${user}'s password" 1>&2; return 1; }
    [ -f ${password_file} ] || { echo "" 1>&2; echo "Password file ${password_file} does not exist or cannot be read, so we cannot determine ${user}'s password." 1>&2; echo "Write ${user}'s password in ./root/opt/.tmp/.${user} and try again." 1>&2; echo "" 1>&2; return 1; }
    password=$(head -1 ${password_file})
    [ -z "${password}" ] && { echo "no password can be read from ${password_file}" 1>&2; return 1; }

    add-user "${user}" "${password}" "${uid}" "${gid}" "${imapusers_gid}" "${dovecot_conf_file}" "${dovecotpw_file}"
}

function add-user() {

    local user=$1
    local password=$2
    local uid=$3
    local gid=$4
    local imapusers_gid=$5
    local dovecot_conf_file=$6
    local dovecotpw_file=$7

    [ -z "${user}" ] && { echo "'user' not provided" 1>&2; exit 1; }
    [ -z "${password}" ] && { echo "'password' not provided" 1>&2; exit 1; }
    [ -z "${uid}" ] && { echo "'uid' not provided" 1>&2; exit 1; }
    [ -z "${gid}" ] && { echo "'gid' not provided" 1>&2; exit 1; }
    [ -z "${imapusers_gid}" ] && { echo "'imapusers_gid' not provided" 1>&2; exit 1; }
    [ -z "${dovecot_conf_file}" ] && { echo "'dovecot_conf_file' not provided" 1>&2; exit 1; }
    [ -f ${dovecot_conf_file} ] || { echo "dovecot_conf_file ${dovecot_conf_file} does not exist or not readable" 1>&2; exit 1; }
    [ -z "${dovecotpw_file}" ] && { echo "'dovecotpw_file' not provided" 1>&2; exit 1; }
    [ -f ${dovecotpw_file} ] || { echo "dovecotpw_file ${dovecot_conf_file} does not exist or not readable" 1>&2; exit 1; }
    [ -x ${dovecotpw_file} ] || { echo "dovecotpw_file ${dovecot_conf_file} cannot be executed" 1>&2; exit 1; }

    echo "adding IMAP user '${user}' ..."
    echo "uid: ${uid}"
    echo "gid: ${gid}"
    echo "imapusers_gid: ${imapusers_gid}"
    echo "dovecot configuration file: ${dovecot_conf_file}"

    update-valid-ids ${uid} ${gid} ${dovecot_conf_file}

    #
    # add password to /opt/dovecot/conf/passwd
    #

    #
    # generate the password
    #

    local passwd_file=$(dirname ${dovecot_conf_file})/passwd
    local hashed_password=$(${dovecotpw_file} -p ${password}) || exit 1
    echo "${user}:${hashed_password}" >> ${passwd_file}
    chmod 0600 ${passwd_file}

    #
    # add user to /opt/dovecot/conf/userdb
    #

    local userdb_file=$(dirname ${dovecot_conf_file})/userdb
    local user_home_dir=/opt/dovecot/home/${user}

    echo "${user}:x:${uid}:${gid}::${user_home_dir}:-" >> ${userdb_file}

    #
    # add imapusers as supplementary group
    #

    cat /etc/group | sed -e 's/^\(imapusers:.*\)$/\1'${uid}'/' > /tmp/.sed.tmp
    mv /tmp/.sed.tmp /etc/group

    #
    # create the home directory
    #

    mkdir ${user_home_dir}
    chown ${uid}:${gid} ${user_home_dir}
    chmod 0700 ${user_home_dir}
}

#
# Updates 'first_valid_uid', 'last_valid_uid', 'first_valid_gid' and 'first_valid_gid' in the dovecot config file.
#
function update-valid-ids() {

    local uid=$1
    local gid=$2
    local dovecot_conf_file=$3

    [ -z "${uid}" ] && { echo "'uid' not provided" 1>&2; exit 1; }
    [ -z "${gid}" ] && { echo "'gid' not provided" 1>&2; exit 1; }
    [ -z "${dovecot_conf_file}" ] && { echo "'dovecot_conf_file' not provided" 1>&2; exit 1; }
    [ -f ${dovecot_conf_file} ] || { echo "dovecot_conf_file ${dovecot_conf_file} does not exist or not readable" 1>&2; exit 1; }

    echo "updating first_valid_uid/last_valid_uid/first_valid_gid/first_valid_gid in ${dovecot_conf_file} ..."

    local temp_file=/tmp/.sed.tmp

    local first_valid_uid=$(grep "^first_valid_uid *=" ${dovecot_conf_file})
    [ -z "${first_valid_uid}" ] && { echo "no 'first_valid_uid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    first_valid_uid=${first_valid_uid#*=}
    first_valid_uid=${first_valid_uid## }
    if [ ${uid} -lt ${first_valid_uid} ]; then
        sed -e 's/^first_valid_uid.*$/first_valid_uid = '${uid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated first_valid_uid = ${uid}"
    fi

    local last_valid_uid=$(grep "^last_valid_uid *=" ${dovecot_conf_file})
    [ -z "${last_valid_uid}" ] && { echo "no 'last_valid_uid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    last_valid_uid=${last_valid_uid#*=}
    last_valid_uid=${last_valid_uid## }
    if [ ${uid} -gt ${last_valid_uid} ]; then
        sed -e 's/^last_valid_uid.*$/last_valid_uid = '${uid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated last_valid_uid = ${uid}"
    fi

    local first_valid_gid=$(grep "^first_valid_gid *=" ${dovecot_conf_file})
    [ -z "${first_valid_gid}" ] && { echo "no 'first_valid_gid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    first_valid_gid=${first_valid_gid#*=}
    first_valid_gid=${first_valid_gid## }
    if [ ${gid} -lt ${first_valid_gid} ]; then
        sed -e 's/^first_valid_gid.*$/first_valid_gid = '${gid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated first_valid_gid = ${gid}"
    fi

    local last_valid_gid=$(grep "^last_valid_gid *=" ${dovecot_conf_file})
    [ -z "${last_valid_gid}" ] && { echo "no 'last_valid_gid=...' found in ${dovecot_conf_file} " 1>&2; exit 1; }
    last_valid_gid=${last_valid_gid#*=}
    last_valid_gid=${last_valid_gid## }
    if [ ${gid} -gt ${last_valid_gid} ]; then
        sed -e 's/^last_valid_gid.*$/last_valid_gid = '${gid}'/' ${dovecot_conf_file} > ${temp_file} || exit 1
        mv ${temp_file} ${dovecot_conf_file} || exit 1
        echo "updated last_valid_gid = ${gid}"
    fi

}

main "$@"